@page "/datagrid"

@* @attribute [RenderModeInteractiveServer(false)] *@

<h3>Simple DataGrid</h3>

<FluentDataGrid Items="@people">
    <PropertyColumn Property="@(p => p.PersonId)" Sortable="true" />
    <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
    <PropertyColumn Property="@(p => p.BirthDate)" Format="yyyy-MM-dd" Sortable="true" />
</FluentDataGrid>

<h3>Typical usage</h3>

<FluentDataGrid Items="@FilteredItems" ResizableColumns=true Pagination="@pagination" GridTemplateColumns="0.2fr 1fr 0.2fr 0.2fr 0.2fr 0.2fr" RowClass="@rowClass" RowStyle="@rowStyle" Style="height: 405px; overflow:auto;">
    <TemplateColumn Tooltip="true" TooltipText="@(c => "Flag of " + c.Name)" Title="Rank" SortBy="@rankSort" Align="Align.Center" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn=true>
        <img class="flag" src="/flags/@(context.Code).svg" alt="Flag of @(context.Code)" />
    </TemplateColumn>
    <PropertyColumn Property="@(c => c.Name)" Sortable="true" Tooltip="true" Title="Name of the country">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleCountryFilter" @bind-Value:after="HandleClear" Placeholder="Country name..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(c => c.Medals.Gold)" Sortable="true" Align="Align.Start" Tooltip="true" TooltipText="@(c => "That is " + c.Medals.Gold + " x GOLD!!")" />
    <PropertyColumn Property="@(c => c.Medals.Silver)" Sortable="true" Align="Align.Center" Tooltip="true" />
    <PropertyColumn Property="@(c => c.Medals.Bronze)" Sortable="true" Align="Align.End" />
    <PropertyColumn Property="@(c => c.Medals.Total)" Align="Align.End" Tooltip="true" />
</FluentDataGrid>

<FluentPaginator State="@pagination" />

<h3>Remote Data</h3>

<div style="height: 434px; overflow:auto;" tabindex="-1">
    <FluentDataGrid ItemsProvider="countryProvider" Virtualize="true" ItemSize="46" GenerateHeader="GenerateHeaderOption.Sticky" TGridItem="Country">
        <PropertyColumn Title="Code" Property="@(c => c!.Code)" />
        <PropertyColumn Property="@(c => c!.Name)" Style="color:burlywood" />
        <PropertyColumn Property="@(c => c!.Medals.Total)" />
        <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => null)" />
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => null)" />
        </TemplateColumn>
    </FluentDataGrid>
</div>


@code {

    bool _clearItems = false;
    IQueryable<Country>? items;
    IQueryable<Country>? items2;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    string nameFilter = string.Empty;

    GridSort<Country> rankSort = GridSort<Country>
        .ByDescending(x => x.Medals.Gold)
        .ThenDescending(x => x.Medals.Silver)
        .ThenDescending(x => x.Medals.Bronze);

    Func<Country, string?> rowClass = x => x.Name.StartsWith("A") ? "highlighted-row" : null;
    Func<Country, string?> rowStyle = x => x.Name.StartsWith("Au") ? "background-color: var(--highlight-bg);" : null;

    IQueryable<Country>? FilteredItems => items?.Where(x => x.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

    GridItemsProvider<Country> countryProvider = default!;

    protected override void OnInitialized()
    {
        items = _countries.AsQueryable();
        items2 = _countries.AsQueryable();
    }

    private void HandleCountryFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ICollection<Country> countryCollection = _countries;

        countryProvider = async req =>
        {        
            return GridItemsProviderResult.From<Country>(
            items: countryCollection,
            totalItemCount: 0);
        };
    }



    record Person(int PersonId, string Name, DateOnly BirthDate);

    IQueryable<Person> people = new[]
    {
        new Person(10895, "Jean Martin", new DateOnly(1985, 3, 16)),
        new Person(10944, "António Langa", new DateOnly(1991, 12, 1)),
        new Person(11203, "Julie Smith", new DateOnly(1958, 10, 10)),
        new Person(11205, "Nur Sari", new DateOnly(1922, 4, 27)),
        new Person(11898, "Jose Hernandez", new DateOnly(2011, 5, 3)),
        new Person(12130, "Kenji Sato", new DateOnly(2004, 1, 9)),
    }.AsQueryable();

    record Medals
    {
        public int Gold { get; set; }
        public int Silver { get; set; }
        public int Bronze { get; set; }
        public int Total => Gold + Silver + Bronze;

    };
    record Country(string Code, string Name, Medals Medals);

    private readonly static Country[] _countries = new[]
    {
        new Country("ar", "Argentina", new Medals { Gold = 0, Silver = 1, Bronze = 2 }),
        new Country("am", "Armenia", new Medals { Gold = 0, Silver = 2, Bronze = 2 }),
        new Country("au", "Australia", new Medals { Gold = 17, Silver = 7, Bronze = 22 }),
        new Country("at", "Austria", new Medals { Gold = 1, Silver = 1, Bronze = 5 }),
        new Country("az", "Azerbaijan", new Medals { Gold = 0, Silver = 3, Bronze = 4 }),
        new Country("bs", "Bahamas", new Medals { Gold = 2, Silver = 0, Bronze = 0 }),
        new Country("bh", "Bahrain", new Medals { Gold = 0, Silver = 1, Bronze = 0 }),
        new Country("by", "Belarus", new Medals { Gold = 1, Silver = 3, Bronze = 3 }),
        new Country("be", "Belgium", new Medals { Gold = 3, Silver = 1, Bronze = 3 }),
        new Country("bm", "Bermuda", new Medals { Gold = 1, Silver = 0, Bronze = 0 }),
        new Country("bw", "Botswana", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
        new Country("br", "Brazil", new Medals { Gold = 7, Silver = 6, Bronze = 8 }),
        new Country("bg", "Bulgaria", new Medals { Gold = 3, Silver = 1, Bronze = 2 }),
        new Country("bf", "Burkina Faso", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
        new Country("ca", "Canada", new Medals { Gold = 7, Silver = 6, Bronze = 11 }),
        new Country("tpe", "Chinese Taipei", new Medals { Gold = 2, Silver = 4, Bronze = 6 }),
        new Country("co", "Colombia", new Medals { Gold = 0, Silver = 4, Bronze = 1 }),
        new Country("ci", "Côte d'Ivoire", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
        new Country("hr", "Croatia", new Medals { Gold = 3, Silver = 3, Bronze = 2 }),
        new Country("cu", "Cuba", new Medals { Gold = 7, Silver = 3, Bronze = 5 }),
        new Country("cz", "Czech Republic", new Medals { Gold = 4, Silver = 4, Bronze = 3 }),
        new Country("dk", "Denmark", new Medals { Gold = 3, Silver = 4, Bronze = 4 }),
        new Country("do", "Dominican Republic", new Medals { Gold = 0, Silver = 3, Bronze = 2 }),
        new Country("ec", "Ecuador", new Medals { Gold = 2, Silver = 1, Bronze = 0 }),
        new Country("eg", "Egypt", new Medals { Gold = 1, Silver = 1, Bronze = 4 }),
        new Country("ee", "Estonia", new Medals { Gold = 1, Silver = 0, Bronze = 1 }),
        new Country("et", "Ethiopia", new Medals { Gold = 1, Silver = 1, Bronze = 2 }),
        new Country("fj", "Fiji", new Medals { Gold = 1, Silver = 0, Bronze = 1 }),
        new Country("fi", "Finland", new Medals { Gold = 0, Silver = 0, Bronze = 2 }),
        new Country("fr", "France", new Medals { Gold = 10, Silver = 12, Bronze = 11 }),
        new Country("ge", "Georgia", new Medals { Gold = 2, Silver = 5, Bronze = 1 }),
        new Country("de", "Germany", new Medals { Gold = 10, Silver = 11, Bronze = 16 }),
        new Country("gh", "Ghana", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
        new Country("gb", "Great Britain", new Medals { Gold = 22, Silver = 21, Bronze = 22 }),
        new Country("gr", "Greece", new Medals { Gold = 2, Silver = 1, Bronze = 1 }),
        new Country("gd", "Grenada", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
        new Country("hk", "Hong Kong, China", new Medals { Gold = 1, Silver = 2, Bronze = 3 }),
        new Country("hu", "Hungary", new Medals { Gold = 6, Silver = 7, Bronze = 7 }),
        new Country("in", "India", new Medals { Gold = 1, Silver = 2, Bronze = 4 }),
        new Country("id", "Indonesia", new Medals { Gold = 1, Silver = 1, Bronze = 3 }),
        new Country("ie", "Ireland", new Medals { Gold = 2, Silver = 0, Bronze = 2 }),
        new Country("ir", "Islamic Republic of Iran", new Medals { Gold = 3, Silver = 2, Bronze = 2 }),
        new Country("il", "Israel", new Medals { Gold = 2, Silver = 0, Bronze = 2 }),
        new Country("it", "Italy", new Medals { Gold = 10, Silver = 10, Bronze = 20 }),
        new Country("jm", "Jamaica", new Medals { Gold = 4, Silver = 1, Bronze = 4 }),
        new Country("jp", "Japan", new Medals { Gold = 27, Silver = 14, Bronze = 17 }),
        new Country("jo", "Jordan", new Medals { Gold = 0, Silver = 1, Bronze = 1 }),
        new Country("kz", "Kazakhstan", new Medals { Gold = 0, Silver = 0, Bronze = 8 }),
        new Country("ke", "Kenya", new Medals { Gold = 4, Silver = 4, Bronze = 2 }),
        new Country("xk", "Kosovo", new Medals { Gold = 2, Silver = 0, Bronze = 0 }),
        new Country("kw", "Kuwait", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
        new Country("kg", "Kyrgyzstan", new Medals { Gold = 0, Silver = 2, Bronze = 1 }),
        new Country("lv", "Latvia", new Medals { Gold = 1, Silver = 0, Bronze = 1 }),
        new Country("lt", "Lithuania", new Medals { Gold = 0, Silver = 1, Bronze = 0 }),
        new Country("my", "Malaysia", new Medals { Gold = 0, Silver = 1, Bronze = 1 }),
        new Country("mx", "Mexico", new Medals { Gold = 0, Silver = 0, Bronze = 4 }),
        new Country("mn", "Mongolia", new Medals { Gold = 0, Silver = 1, Bronze = 3 }),
        new Country("ma", "Morocco", new Medals { Gold = 1, Silver = 0, Bronze = 0 }),
        new Country("na", "Namibia", new Medals { Gold = 0, Silver = 1, Bronze = 0 }),
        new Country("nl", "Netherlands", new Medals { Gold = 10, Silver = 12, Bronze = 14 }),
        new Country("nz", "New Zealand", new Medals { Gold = 7, Silver = 6, Bronze = 7 }),
        new Country("ng", "Nigeria", new Medals { Gold = 0, Silver = 1, Bronze = 1 }),
        new Country("mk", "North Macedonia", new Medals { Gold = 0, Silver = 1, Bronze = 0 }),
        new Country("no", "Norway", new Medals { Gold = 4, Silver = 2, Bronze = 2 }),
        new Country("cn", "People's Republic of China", new Medals { Gold = 38, Silver = 32, Bronze = 18 }),
        new Country("ph", "Philippines", new Medals { Gold = 1, Silver = 2, Bronze = 1 }),
        new Country("pl", "Poland", new Medals { Gold = 4, Silver = 5, Bronze = 5 }),
        new Country("pt", "Portugal", new Medals { Gold = 1, Silver = 1, Bronze = 2 }),
        new Country("pr", "Puerto Rico", new Medals { Gold = 1, Silver = 0, Bronze = 0 }),
        new Country("qa", "Qatar", new Medals { Gold = 2, Silver = 0, Bronze = 1 }),
        new Country("kr", "Republic of Korea", new Medals { Gold = 6, Silver = 4, Bronze = 10 }),
        new Country("md", "Republic of Moldova", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
        new Country("roc", "ROC", new Medals { Gold = 20, Silver = 28, Bronze = 23 }),
        new Country("ro", "Romania", new Medals { Gold = 1, Silver = 3, Bronze = 0 }),
        new Country("sm", "San Marino", new Medals { Gold = 0, Silver = 1, Bronze = 2 }),
        new Country("sa", "Saudi Arabia", new Medals { Gold = 0, Silver = 1, Bronze = 0 }),
        new Country("rs", "Serbia", new Medals { Gold = 3, Silver = 1, Bronze = 5 }),
        new Country("sk", "Slovakia", new Medals { Gold = 1, Silver = 2, Bronze = 1 }),
        new Country("si", "Slovenia", new Medals { Gold = 3, Silver = 1, Bronze = 1 }),
        new Country("za", "South Africa", new Medals { Gold = 1, Silver = 2, Bronze = 0 }),
        new Country("es", "Spain", new Medals { Gold = 3, Silver = 8, Bronze = 6 }),
        new Country("se", "Sweden", new Medals { Gold = 3, Silver = 6, Bronze = 0 }),
        new Country("ch", "Switzerland", new Medals { Gold = 3, Silver = 4, Bronze = 6 }),
        new Country("sy", "Syrian Arab Republic", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
        new Country("th", "Thailand", new Medals { Gold = 1, Silver = 0, Bronze = 1 }),
        new Country("tn", "Tunisia", new Medals { Gold = 1, Silver = 1, Bronze = 0 }),
        new Country("tr", "Turkey", new Medals { Gold = 2, Silver = 2, Bronze = 9 }),
        new Country("tm", "Turkmenistan", new Medals { Gold = 0, Silver = 1, Bronze = 0 }),
        new Country("ug", "Uganda", new Medals { Gold = 2, Silver = 1, Bronze = 1 }),
        new Country("ua", "Ukraine", new Medals { Gold = 1, Silver = 6, Bronze = 12 }),
        new Country("us", "United States of America", new Medals { Gold = 39, Silver = 41, Bronze = 33 }),
        new Country("uz", "Uzbekistan", new Medals { Gold = 3, Silver = 0, Bronze = 2 }),
        new Country("ve", "Venezuela", new Medals { Gold = 1, Silver = 3, Bronze = 0 }),
    };
}

<style>
    /* Ensure all the flags are the same size, and centered */
    .flag {
        height: 1rem;
        margin: auto;
        border: 1px solid var(--neutral-layer-3);
    }


    /* Stop country name text from wrapping, and truncate with ellipsis */
    ::deep .country-name::part(control) {
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>