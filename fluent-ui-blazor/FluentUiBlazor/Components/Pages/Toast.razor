@page "/toast"

@* @attribute [RenderModeInteractiveServer(false)] *@

@inject IToastService ToastService

<h3>Default Toast</h3>

<p>Click on this button to open a Toast. The toast is created by just specifying an intent and a message.</p>

<FluentButton @onclick="@ShowToast" Appearance="Appearance.Accent">Open</FluentButton>

<h3>Toast with Options</h3>

<p>Click on this button to open a Toast. The toast is created by specifying an intent, message, action and a random timeout between 3 and 15 seconds.</p>

<FluentButton @onclick="@ShowToast2" Appearance="Appearance.Accent">Open</FluentButton>

<h3>Confirmation Toasts</h3>

<FluentStack Orientation="Orientation.Vertical" VerticalGap="10">
    <FluentStack Wrap=true>
        <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowSuccess("Success confirmation."))">
            <FluentIcon Value="@(new Icons.Filled.Size20.CheckmarkCircle())" Color="@Color.Success" Slot="start" />
            Show Success
        </FluentButton>
        <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowWarning("Warning confirmation."))">
            <FluentIcon Value="@(new Icons.Filled.Size20.Warning())" Color="@Color.Warning" Slot="start" />
            Show Warning
        </FluentButton>
        <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowError("Error confirmation."))">
            <FluentIcon Value="@(new Icons.Filled.Size20.DismissCircle())" Color="@Color.Error" Slot="start" />
            Show Error
        </FluentButton>
        <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowInfo("Info confirmation."))">
            <FluentIcon Value="@(new Icons.Filled.Size20.Info())" Color="@Color.Info" Slot="start" />
            Show Info
        </FluentButton>
        <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowProgress("Progress confirmation."))">
            <FluentIcon Value="@(new Icons.Regular.Size20.Flash())" Color="@Color.Neutral" Slot="start" />
            Show progress
        </FluentButton>
        <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowUpload("Upload confirmation."))">
            <FluentIcon Value="@(new Icons.Regular.Size20.ArrowUpload())" Color="@Color.Neutral" Slot="start" />
            Show upload
        </FluentButton>
        <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowDownload("Download confirmation."))">
            <FluentIcon Value="@(new Icons.Regular.Size20.ArrowDownload())" Color="@Color.Neutral" Slot="start" />
            Show download
        </FluentButton>
        <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowEvent("Event confirmation."))">
            <FluentIcon Value="@(new Icons.Regular.Size20.CalendarLtr())" Color="@Color.Neutral" Slot="start" />
            Show event
        </FluentButton>
        <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowMention("Mention confirmation."))">
            <FluentIcon Value="@(new Icons.Regular.Size20.Person())" Color="@Color.Neutral" Slot="start" />
            Show mention
        </FluentButton>
        <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowCustom("Custom confirmation.", null, null, null, (new Icons.Regular.Size24.Delete(), Color.Accent)))">
            <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Color="@Color.Neutral" Slot="start" />
            Show custom
        </FluentButton>
    </FluentStack>
    <FluentStack Wrap=true>
        <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowCustom("Confirmation without an icon."))">
            Without icon
        </FluentButton>

        <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowSuccess("Success confirmation with action.", null, "Action", EventCallback.Factory.Create<ToastResult>(this, HandleTopAction)))">
            With action
        </FluentButton>

        <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowInfo("Info confirmation custom settings.", 10))">
            Custom timeout
        </FluentButton>

        <FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastService.ShowSuccess("Success confirmation with a lot of text to see what a toast looks like when it's really big."))">
            <FluentIcon Value="@(new Icons.Filled.Size20.CheckmarkCircle())" Color="@Color.Success" Slot="start" />
            Long Success
        </FluentButton>
    </FluentStack>
</FluentStack>

<h3>Communication Toasts</h3>

<FluentButton Appearance=Appearance.Neutral @onclick="@ShowExample1">Communication toast example 1</FluentButton>
<FluentButton Appearance=Appearance.Neutral @onclick="@ShowExample2">Communication toast example 2</FluentButton>

@code
{
    int counter = 1;

    void ShowToast()
    {
        Random rnd = new();

        var intent = Enum.GetValues<ToastIntent>()[rnd.Next(10)];
        var message = $"Simple Toast #{counter++}";
        ToastService.ShowToast(intent, message);
    }

    void ShowToast2()
    {
        Random rnd = new();

        var intent = Enum.GetValues<ToastIntent>()[rnd.Next(10)];
        var message = $"Simple Toast #{counter++}";

        ToastService.ShowToast(
            intent,
            message,
            rnd.Next(3000, 15000),
            "Log click",
            EventCallback.Factory.Create<ToastResult>(this, HandleTopAction)
        );
    }

    private void HandleTopAction(ToastResult result)
    {
        
    }

    private async Task HandleTopActionAsync(ToastResult result)
    {
        await Task.Run(() => null );
    }

    private void ShowExample1()
    {
        ToastService.ShowCommunicationToast(new ToastParameters<CommunicationToastContent>()
            {
                Intent = ToastIntent.Success,
                Title = "Your dataset is ready",
                Timeout = 4000,
                PrimaryAction = "See dataset",
                OnPrimaryAction = EventCallback.Factory.Create<ToastResult>(this, ClickedPrimary),
                SecondaryAction = "Get insights",
                OnSecondaryAction = EventCallback.Factory.Create<ToastResult>(this, ClickedSecondary),
                Content = new CommunicationToastContent()
                {
                    Subtitle = "A communication toast subtitle",
                    Details = "Let Power BI help you explore your data.",
                },
            });
    }

    private void ShowExample2()
    {
        ToastService.ShowCommunicationToast(new ToastParameters<CommunicationToastContent>()
            {
                Intent = ToastIntent.Error,
                Title = "File didn't upload to ABC folder",
                TopCTAType = ToastTopCTAType.Timestamp,
                Timeout = 8000,
                PrimaryAction = "Replace",
                OnPrimaryAction = EventCallback.Factory.Create<ToastResult>(this, ClickedPrimary),
                SecondaryAction = "Keep both",
                OnSecondaryAction = EventCallback.Factory.Create<ToastResult>(this, ClickedSecondary),
                Content = new CommunicationToastContent()
                {
                    Details = "A file with the same _name already exists.",
                },
            });
    }


    private void ClickedPrimary(ToastResult result)
    {
        
    }

    private void ClickedSecondary()
    {
        
    }
}