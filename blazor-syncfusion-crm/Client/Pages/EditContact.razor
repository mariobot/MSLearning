@page "/contacts/edit/{id:int}"
@page "/contacts/new"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@if (Id is not null)
{
    <h3>Edit @contact.NickName</h3>
}
else
{
    <h3>Create a new contact</h3>
}

<div>
    <EditForm Model="contact" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <SfTextBox CssClass="e-outline" Placeholder="First Name" 
                   FloatLabelType="@FloatLabelType.Auto" @bind-Value="contact.FirstName"></SfTextBox>
        <SfTextBox CssClass="e-outline" Placeholder="Last Name"
                   FloatLabelType="@FloatLabelType.Auto" @bind-Value="contact.LastName"></SfTextBox>
        <SfTextBox CssClass="e-outline" Placeholder="Nick Name"
                   FloatLabelType="@FloatLabelType.Auto" @bind-Value="contact.NickName"></SfTextBox>
        <ValidationMessage For="(() => contact.NickName)"></ValidationMessage>
        <SfTextBox CssClass="e-outline" Placeholder="Place"
                   FloatLabelType="@FloatLabelType.Auto" @bind-Value="contact.Place"></SfTextBox>
        <SfDatePicker CssClass="e-outline" TValue="DateTime?" Placeholder="Date of Birth"
                   FloatLabelType="@FloatLabelType.Auto" @bind-Value="contact.DateOfBirth"
                   Format="MM/dd/yyyy"></SfDatePicker>
        <hr />
        <SfButton CssClass="e-primary" IconCss="e-icons e-save" Content="Save" type="submit" />
    </EditForm>
    <p>
        <SfMessage Severity="MessageSeverity.Success" Visible="showSuccessMessage" >
            Contact save succesfully.
        </SfMessage>
        <SfMessage Severity="MessageSeverity.Error" Visible="showErrorMessage" >
            Opps, something went wrong.
        </SfMessage>
    </p>
</div>



@code {
    [Parameter]
    public int? Id { get; set; }

    public Contact contact { get; set; } = new Contact();

    bool showSuccessMessage = false;
    bool showErrorMessage = false;

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            var result = await HttpClient.GetAsync($"api/contacts/{Id}");

            if (result.IsSuccessStatusCode)
            {
                var jsonResult = await result.Content.ReadFromJsonAsync<Contact>();

                if (jsonResult is not null)
                    contact = jsonResult;
            }
            else
            {
                NavigationManager.NavigateTo("/contacts/new");

            }
        }
    }

    async Task HandleSubmit()
    {
        HttpResponseMessage result;

        if (Id is not null)
            result = await HttpClient.PutAsJsonAsync($"api/contacts/{contact.Id}", contact);
        else
            result = await HttpClient.PostAsJsonAsync($"api/contacts", contact);

        if (result.IsSuccessStatusCode)
        {
            var jsonResult = await result.Content.ReadFromJsonAsync<Contact>();
            if (jsonResult is not null)
            {
                contact = jsonResult;
                showSuccessMessage = true;
            }
        }
        else
        {
            showErrorMessage = true;
        }
    }

}
