@page "/games"
@inject DataContext dataContext
@attribute [StreamRendering]
@inject NavigationManager navigationManager

<PageTitle>Video Games</PageTitle>
<h3>Video Games</h3>

@if (videoGames.Count == 0)
{
    <p><em>Loading Video Games...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Publisher</th>
                <th>Release Year</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var videoGame in videoGames)
            {
                <tr>
                    <td>@videoGame.Title</td>
                    <td>@videoGame.Publisher</td>
                    <td>@videoGame.ReleaseDate</td>
                    <td><a href="/edit-game/@videoGame.Id">Edit</a></td>
                    <td>
                        <form method="post" @formname="@($"deletegameform{videoGame.Id}")" @onsubmit="() => DeleteGame(videoGame.Id)">
                            <button class="btn btn-danger">Delete</button>
                            <AntiforgeryToken></AntiforgeryToken>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<a href="/edit-game">Add Video Game</a>

@code {

    List<VideoGame> videoGames = new List<VideoGame>();

    protected override async Task OnInitializedAsync()
    {
        videoGames = await dataContext.VideoGames.ToListAsync();
    }

    private async Task DeleteGame(int Id)
    {
        var dbGame = await dataContext.VideoGames.FindAsync(Id);
        if (dbGame is not null)
        {
            dataContext.Remove(dbGame);
            await dataContext.SaveChangesAsync();

            videoGames = await dataContext.VideoGames.ToListAsync();
            //navigationManager.NavigateTo("/games");
        }
    }
}
