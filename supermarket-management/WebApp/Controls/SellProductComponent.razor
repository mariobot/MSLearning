@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase

@if (productToSell != null)
{
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <EditForm Model="productToSell" OnValidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Nombre del Producto</label>
            <input id="name" class="form-control" readonly value="@productToSell.Name" />
        </div>
        <div class="form-group">
            <label for="price">Precio</label>
            <input id="price" class="form-control" readonly value="@string.Format("{0:C0}",productToSell.Price)" />
        </div>
        <div class="form-group">
            <label for="quantity">Cantidad</label>
            <InputNumber id="quantity" @bind-Value="@productToSell.Quantity" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Comprar</button>
    </EditForm>
}


@code {

    private Product productToSell;
    private string errorMessage;

    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (SelectedProduct != null)
        {
            productToSell = new Product()
            {
                Name = SelectedProduct.Name,
                CategoryId = SelectedProduct.CategoryId,
                Quantity = 1,
                Price = SelectedProduct.Price,
                ProductId = SelectedProduct.ProductId
            };
        }
        else 
        {
            productToSell = null;
        
        }
    }

    private void SellProduct()
    {
        var product = GetProductByIdUseCase.Execute(productToSell.ProductId);
        if (productToSell.Quantity <= 0)
        {
            errorMessage = "La cantidad tiene que ser mayor a 0";
        }
        else if (product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            SellProductUseCase.Execute(productToSell.ProductId, productToSell.Quantity.Value);
            errorMessage = string.Empty;
        }
        else
        {
            errorMessage = $"{product.Name} solo tiene {product.Quantity} unidades. No hay suficientes.";
        }
    }
}
