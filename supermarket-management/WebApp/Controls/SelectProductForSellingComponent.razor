@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IViewProductByCategoryId ViewProductByCategoryId


<div class="form-group">
    <label for="category">Categoria</label>
    <select id="category" @bind="SelectedCategoryId" class="form-control">
        <option selected></option>
        @foreach (var category in categories)
        {
            <option value="@category.CategoryId">@category.Name</option>
        }
    </select>
</div>
@if (productsInCategory != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Cantidad</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in productsInCategory)
            {
                <tr>
                    <th>@product.Name</th>
                    <th>@product.Quantity</th>
                    <th></th>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private IEnumerable<Product> productsInCategory;
    private int selectedCategoryId;
    private int SelectedCategoryId
    {
        get { return selectedCategoryId; }
        set
        {
            selectedCategoryId = value;
            productsInCategory = ViewProductByCategoryId.Execute(value);
            StateHasChanged();
        }
    }

    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        categories = ViewCategoriesUseCase.Execute();
    }

}
