@page "/products"
@attribute [Authorize(Policy = "AdminOnly")]

@inject NavigationManager NavigationManager
@inject IViewProductsUseCase ViewProductsUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject IDeleteProductUseCase DeleteProductUseCase

<h3>Productos</h3>

@if (products != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Categoria</th>
                <th>Nombre</th>
                <th>Precio</th>
                <th>Cantidad</th>
                <th>Editar</th>
                <th>Eliminar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@GetCategoryByIdUseCase.Execute(product.CategoryId.Value)?.Name</td>
                    <td>@product.Name</td>
                    <td>@string.Format("{0:C0}", product.Price)</td>
                    <td>@product.Quantity</td>
                    <td><button type="button" @onclick="@(() => OnEditProduct(product.ProductId))" class="btn btn-primary">Editar</button></td>
                    <td><button type="button" @onclick="@(() => DeleteProduct(product.ProductId))" class="btn btn-primary">Eliminar</button></td>
                </tr>
            }
        </tbody>
    </table>
}
<button type="button" @onclick="OnClickAddProduct" class="btn btn-primary">Adicionar Producto</button>

@code {
    private IEnumerable<Product> products;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadProducts();
    }

    protected void OnClickAddProduct()
    {
        NavigationManager.NavigateTo("/addproduct");
    }

    protected void OnEditProduct(int ProductId)
    {
        NavigationManager.NavigateTo($"/editproduct/{ProductId}");
    }

    protected void DeleteProduct(int ProductId)
    {
        DeleteProductUseCase.Execute(ProductId);
        LoadProducts();
    }

    protected void LoadProducts()
    {
        products = ViewProductsUseCase.Execute();
    }
}
