@page "/metronome"
@inject IJSRuntime JS;


<MudPaper Class="pa-16 ma-2" Square="true">

</MudPaper>
<MudPaper Class="pa ma-2" Square="true">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">The Story Book</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudText>This day everything happend.</MudText>
            <MudTextField Typo="Typo.body2" @bind-Value="this.bpm" Color="Color.Primary">BPM.</MudTextField>
            <MudTextField Typo="Typo.body2" @bind-Value="this.beat" Color="Color.Primary">Beat.</MudTextField>
        </MudCardContent>
        <MudCardActions>
            <MudButton Class="btn-btn-primary" @onclick="StartAsync">Start</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
        </MudCardActions>
    </MudCard>
</MudPaper>
<MudPaper Class="pa-16 ma-2" Square="true">

</MudPaper>




@code
{           
    public int bpm { get; set; }
    public int beat { get; set; }
    public int click { get; set; }
    public bool enable { get; set; }

    protected override void OnInitialized()
    {
        bpm = 100;
        beat = 4;
        click = 0;
        enable = false;

        base.OnInitialized();
    }

    async void StartAsync()
    {   
        var interval = TimeSpan.FromSeconds(60.0 / this.bpm);

        enable = enable ? false : true;

        while (enable)
        {            
            if (this.click++ >= this.beat)
            {
                
                this.click = 1;
            }

            StateHasChanged();

            JS.InvokeVoidAsync("playClick", this.bpm, this.click == 1);

            await Task.Delay(interval);
        }
    }
}

